// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User & Auth
model User {
  id                  String         @id @default(cuid())
  phoneNumber         String?        @unique
  phoneNumberVerified DateTime?
  email               String?        @unique
  emailVerified       DateTime?
  picUrl              String?
  tontines            Tontine[]
  sessions            Session[]
  refreshToken        RefreshToken[]
  account             Account[]
  memberships         Membership[]
}

model Account {
  id            String  @id @default(cuid())
  userId        String
  type          String
  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int?
  token_type    String?
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// App
model Tontine {
  id                 String         @id @default(cuid())
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  managerId          String
  name               String
  description        String?
  picUrl             String?
  manager            User           @relation(fields: [managerId], references: [id])
  memberships        Membership[]
  schedulingType     SchedulingType
  contributionAmount Decimal        @db.Money
}

model Membership {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tontine   Tontine  @relation(fields: [tontineId], references: [id])
  tontineId String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  member    Member?
}

model Member {
  id                      String          @id @default(cuid())
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  membershipId            String          @unique
  membership              Membership      @relation(fields: [membershipId], references: [id])
  phoneNumber             String
  email                   String?
  picUrl                  String?
  situation               MemberSituation
  role                    MemberRole
  meetingsAsHost          Meeting[]       @relation("MeetingsAsHost")
  meetingsAsParticipant   Meeting[]       @relation("MeetingsAsParticipant")
  meetingsAsEarner        Meeting[]       @relation("MeetingsAsEarner")
  transactionsAsAuthor    Transaction[]   @relation("TransactionsAsAuthor")
  transactionsAsRecipient Transaction[]   @relation("TransactionsAsRecipient")
}

model Meeting {
  id                 String        @id @default(cuid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  startsAt           DateTime
  host               Member        @relation("MeetingsAsHost", fields: [hostId], references: [id])
  hostId             String
  title              String?
  description        String?
  location           String?
  participants       Member[]      @relation("MeetingsAsParticipant")
  expectedEarnings   Decimal       @db.Money
  actualEarnings     Decimal       @db.Money
  contributionAmount Decimal       @db.Money
  transactions       Transaction[]
  earnerId           String
  earner             Member        @relation("MeetingsAsEarner", fields: [earnerId], references: [id])
}

model Transaction {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  meeting     Meeting  @relation(fields: [meetingId], references: [id])
  meetingId   String
  author      Member   @relation("TransactionsAsAuthor", fields: [authorId], references: [id])
  authorId    String
  recipient   Member   @relation("TransactionsAsRecipient", fields: [recipientId], references: [id])
  recipientId String
  completedAt DateTime
  amount      Decimal  @db.Money
}

// Enums
enum SchedulingType {
  FirstSundayOfTheMonth
  FirstSaturdayOfTheMonth
  Custom
}

enum MemberSituation {
  Active
  Suspended
  Left
}

enum MemberRole {
  Contributor
  Manager
  AssistantManager
}
